public class Point {
   float x, y;
   
   Point(){}
   Point(float x,float y){this.x=x; this.y=y;}
}
import java.lang.Math;

public class Line {
   public Point p1, p2;
   
   Line(){}
   Line(Point p1,Point p2){this.p1=p1; this.p2=p2;}

public boolean onLine(Line l1, Point p) {        //p is on the line or not is checked
   if(p.x <= Math.max(l1.p1.x, l1.p2.x) && p.x <= Math.min(l1.p1.x, l1.p2.x) &&
      (p.y <= Math.max(l1.p1.y, l1.p2.y) && p.y <= Math.min(l1.p1.y, l1.p2.y)))
         return true;

   return false;
}

public int direction(Point a, Point b, Point c) {
	float val = (b.y-a.y)*(c.x-b.x)-(b.x-a.x)*(c.y-b.y);
   if (val == 0)
      return 0;           //co-linear points
   else if(val < 0)
      return 2;          //anti-clockwise direction
      return 1;          //clockwise direction
}

public boolean isIntersect(Line l1, Line l2) {
   //four direction for two lines and points of other line
   int dir1 = direction(l1.p1, l1.p2, l2.p1);
   int dir2 = direction(l1.p1, l1.p2, l2.p2);
   int dir3 = direction(l2.p1, l2.p2, l1.p1);
   int dir4 = direction(l2.p1, l2.p2, l1.p2);

   if(dir1 != dir2 && dir3 != dir4)
      return true;           //they are intersecting
   if(dir1==0 && onLine(l1, l2.p1))        //when p2 of line2 are on the line1
      return true;
   if(dir2==0 && onLine(l1, l2.p2))         //when p1 of line2 are on the line1
      return true;
   if(dir3==0 && onLine(l2, l1.p1))       //when p2 of line1 are on the line2
      return true;
   if(dir4==0 && onLine(l2, l1.p2)) //when p1 of line1 are on the line2
      return true;
   return false;
}

public boolean checkInside(Point poly[], int n, Point p) {
   if(n < 3)
      return false;                  //when polygon has less than 3 edge, it is not polygon
   Line exline = new Line(p,new Point(9999, p.y));   //create a point at infinity, y is same as point p
   int count = 0;
   int i = 0;
   do {
      Line side = new Line(poly[i], poly[(i+1)%n]);     //forming a line from two consecutive points of poly
      if(isIntersect(side, exline)) {          //if side is intersects ex-line
         if(direction(side.p1, p, side.p2) == 0)
            return onLine(side, p);
         count++;
      }
      i = (i+1)%n;
   } while(i != 0);
   if((count&1)>=1) {return true;} 
   else {return false;}          //when count is odd
}

public static void main(String[] args) {
   
   //CASE 1
   Point polygon1[] = new Point[4]; 
   polygon1[0]= new Point(1,0);
   polygon1[1]= new Point(8,3);
   polygon1[2]= new Point(8,8);
   polygon1[3]= new Point(1,5);
	   
   Point p1 = new Point(3,5);
   int n1 = 4;
   
   Line l1=new Line();

   if(l1.checkInside(polygon1, n1, p1))
      System.out.println("Point is inside.**case1");
   else
      System.out.println("Point is outside.**case1");
   
   //CASE 2
   Point polygon2[] = new Point[4]; 
   polygon2[0]= new Point(-3,2);
   polygon2[1]= new Point(-2f,-0.8f);
   polygon2[2]= new Point(0,1.2f);
   polygon2[3]= new Point(2.2f,0);
	   
   Point p2 = new Point(0,0);
   int n2 = 4;
   
   Line l2=new Line();

   if(l2.checkInside(polygon2, n2, p2))
      System.out.println("Point is inside.**case2");
   else
      System.out.println("Point is outside.**case2");
}
}
/*Output
 * 
Point is inside.**case1
Point is outside.**case2
*/
